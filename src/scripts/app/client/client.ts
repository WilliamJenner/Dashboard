/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IClient {
    alert_GetGET(): Promise<Alert[]>;
    alert_GetLatestAlerts(): Promise<Alert[]>;
    alert_GetGET2(id: number): Promise<Alert[]>;
    alert_Put(id: number, newAlert: NewAlert): Promise<void>;
    alert_Delete(id: number): Promise<void>;
    alert_GetPOST(ids: number[]): Promise<Alert[]>;
    alert_Post(newAlert: NewAlert): Promise<void>;
    bindicator_Get(): Promise<BinLookup>;
    news_GetNews(): Promise<NewsMessage[]>;
    status_GetStats(): Promise<Status[]>;
    status_GetProcessInfo(): Promise<ProcessInfoResult[]>;
    weatherForecast_Get(): Promise<OpenWeatherCurrent>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://192.168.1.69:84";
    }

    alert_GetGET(): Promise<Alert[]> {
        let url_ = this.baseUrl + "/Alert/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_GetGET(_response);
        });
    }

    protected processAlert_GetGET(response: Response): Promise<Alert[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Alert.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Alert[]>(<any>null);
    }

    alert_GetLatestAlerts(): Promise<Alert[]> {
        let url_ = this.baseUrl + "/Alert/Latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_GetLatestAlerts(_response);
        });
    }

    protected processAlert_GetLatestAlerts(response: Response): Promise<Alert[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Alert.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Alert[]>(<any>null);
    }

    alert_GetGET2(id: number): Promise<Alert[]> {
        let url_ = this.baseUrl + "/Alert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_GetGET2(_response);
        });
    }

    protected processAlert_GetGET2(response: Response): Promise<Alert[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Alert.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Alert[]>(<any>null);
    }

    alert_Put(id: number, newAlert: NewAlert): Promise<void> {
        let url_ = this.baseUrl + "/Alert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newAlert);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_Put(_response);
        });
    }

    protected processAlert_Put(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    alert_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Alert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_Delete(_response);
        });
    }

    protected processAlert_Delete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    alert_GetPOST(ids: number[]): Promise<Alert[]> {
        let url_ = this.baseUrl + "/Alert/GetMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_GetPOST(_response);
        });
    }

    protected processAlert_GetPOST(response: Response): Promise<Alert[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Alert.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Alert[]>(<any>null);
    }

    alert_Post(newAlert: NewAlert): Promise<void> {
        let url_ = this.baseUrl + "/Alert/NewAlert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newAlert);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAlert_Post(_response);
        });
    }

    protected processAlert_Post(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    bindicator_Get(): Promise<BinLookup> {
        let url_ = this.baseUrl + "/Bindicator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBindicator_Get(_response);
        });
    }

    protected processBindicator_Get(response: Response): Promise<BinLookup> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BinLookup.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BinLookup>(<any>null);
    }

    news_GetNews(): Promise<NewsMessage[]> {
        let url_ = this.baseUrl + "/news";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNews_GetNews(_response);
        });
    }

    protected processNews_GetNews(response: Response): Promise<NewsMessage[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewsMessage.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewsMessage[]>(<any>null);
    }

    status_GetStats(): Promise<Status[]> {
        let url_ = this.baseUrl + "/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStatus_GetStats(_response);
        });
    }

    protected processStatus_GetStats(response: Response): Promise<Status[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Status.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Status[]>(<any>null);
    }

    status_GetProcessInfo(): Promise<ProcessInfoResult[]> {
        let url_ = this.baseUrl + "/status/ProcessInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStatus_GetProcessInfo(_response);
        });
    }

    protected processStatus_GetProcessInfo(response: Response): Promise<ProcessInfoResult[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProcessInfoResult.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProcessInfoResult[]>(<any>null);
    }

    weatherForecast_Get(): Promise<OpenWeatherCurrent> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeatherForecast_Get(_response);
        });
    }

    protected processWeatherForecast_Get(response: Response): Promise<OpenWeatherCurrent> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OpenWeatherCurrent.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OpenWeatherCurrent>(<any>null);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class Alert implements IAlert {
    id?: number;
    message?: string | undefined;
    dateCreated?: Date;
    createdBy?: string | undefined;

    constructor(data?: IAlert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.message = _data["message"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): Alert {
        data = typeof data === 'object' ? data : {};
        let result = new Alert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["message"] = this.message;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface IAlert {
    id?: number;
    message?: string | undefined;
    dateCreated?: Date;
    createdBy?: string | undefined;
}

export class NewAlert implements INewAlert {
    message?: string | undefined;
    createdBy?: string | undefined;

    constructor(data?: INewAlert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): NewAlert {
        data = typeof data === 'object' ? data : {};
        let result = new NewAlert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface INewAlert {
    message?: string | undefined;
    createdBy?: string | undefined;
}

export class BinLookup implements IBinLookup {
    rubbish?: Bin | undefined;
    recycling?: Bin | undefined;
    foodWaste?: Bin | undefined;

    constructor(data?: IBinLookup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rubbish = _data["rubbish"] ? Bin.fromJS(_data["rubbish"]) : <any>undefined;
            this.recycling = _data["recycling"] ? Bin.fromJS(_data["recycling"]) : <any>undefined;
            this.foodWaste = _data["foodWaste"] ? Bin.fromJS(_data["foodWaste"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BinLookup {
        data = typeof data === 'object' ? data : {};
        let result = new BinLookup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rubbish"] = this.rubbish ? this.rubbish.toJSON() : <any>undefined;
        data["recycling"] = this.recycling ? this.recycling.toJSON() : <any>undefined;
        data["foodWaste"] = this.foodWaste ? this.foodWaste.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBinLookup {
    rubbish?: Bin | undefined;
    recycling?: Bin | undefined;
    foodWaste?: Bin | undefined;
}

export class Bin implements IBin {
    subsequent?: Date;
    next?: Date;
    pdfLink?: string | undefined;
    communal?: boolean;

    constructor(data?: IBin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subsequent = _data["subsequent"] ? new Date(_data["subsequent"].toString()) : <any>undefined;
            this.next = _data["next"] ? new Date(_data["next"].toString()) : <any>undefined;
            this.pdfLink = _data["pdfLink"];
            this.communal = _data["communal"];
        }
    }

    static fromJS(data: any): Bin {
        data = typeof data === 'object' ? data : {};
        let result = new Bin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subsequent"] = this.subsequent ? this.subsequent.toISOString() : <any>undefined;
        data["next"] = this.next ? this.next.toISOString() : <any>undefined;
        data["pdfLink"] = this.pdfLink;
        data["communal"] = this.communal;
        return data; 
    }
}

export interface IBin {
    subsequent?: Date;
    next?: Date;
    pdfLink?: string | undefined;
    communal?: boolean;
}

export class NewsMessage implements INewsMessage {
    message?: string | undefined;
    createdBy?: string | undefined;

    constructor(data?: INewsMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): NewsMessage {
        data = typeof data === 'object' ? data : {};
        let result = new NewsMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface INewsMessage {
    message?: string | undefined;
    createdBy?: string | undefined;
}

export class Status implements IStatus {
    totalMb?: number;
    freeMb?: number;
    usedMb?: number;

    constructor(data?: IStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalMb = _data["totalMb"];
            this.freeMb = _data["freeMb"];
            this.usedMb = _data["usedMb"];
        }
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalMb"] = this.totalMb;
        data["freeMb"] = this.freeMb;
        data["usedMb"] = this.usedMb;
        return data; 
    }
}

export interface IStatus {
    totalMb?: number;
    freeMb?: number;
    usedMb?: number;
}

export class ProcessInfoResult implements IProcessInfoResult {
    name?: string | undefined;
    memoryMbUsed?: number;

    constructor(data?: IProcessInfoResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.memoryMbUsed = _data["memoryMbUsed"];
        }
    }

    static fromJS(data: any): ProcessInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["memoryMbUsed"] = this.memoryMbUsed;
        return data; 
    }
}

export interface IProcessInfoResult {
    name?: string | undefined;
    memoryMbUsed?: number;
}

export class OpenWeatherCurrent implements IOpenWeatherCurrent {
    cordinates?: Coordinates | undefined;
    weather?: Weather[] | undefined;
    base?: string | undefined;
    main?: Main | undefined;
    visibility?: string | undefined;
    wind?: Wind | undefined;
    clouds?: Clouds | undefined;
    dt?: number;
    sys?: SysDto | undefined;
    timeZone?: number;
    id?: number;
    name?: string | undefined;
    cod?: number;

    constructor(data?: IOpenWeatherCurrent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cordinates = _data["cordinates"] ? Coordinates.fromJS(_data["cordinates"]) : <any>undefined;
            if (Array.isArray(_data["weather"])) {
                this.weather = [] as any;
                for (let item of _data["weather"])
                    this.weather!.push(Weather.fromJS(item));
            }
            this.base = _data["base"];
            this.main = _data["main"] ? Main.fromJS(_data["main"]) : <any>undefined;
            this.visibility = _data["visibility"];
            this.wind = _data["wind"] ? Wind.fromJS(_data["wind"]) : <any>undefined;
            this.clouds = _data["clouds"] ? Clouds.fromJS(_data["clouds"]) : <any>undefined;
            this.dt = _data["dt"];
            this.sys = _data["sys"] ? SysDto.fromJS(_data["sys"]) : <any>undefined;
            this.timeZone = _data["timeZone"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.cod = _data["cod"];
        }
    }

    static fromJS(data: any): OpenWeatherCurrent {
        data = typeof data === 'object' ? data : {};
        let result = new OpenWeatherCurrent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cordinates"] = this.cordinates ? this.cordinates.toJSON() : <any>undefined;
        if (Array.isArray(this.weather)) {
            data["weather"] = [];
            for (let item of this.weather)
                data["weather"].push(item.toJSON());
        }
        data["base"] = this.base;
        data["main"] = this.main ? this.main.toJSON() : <any>undefined;
        data["visibility"] = this.visibility;
        data["wind"] = this.wind ? this.wind.toJSON() : <any>undefined;
        data["clouds"] = this.clouds ? this.clouds.toJSON() : <any>undefined;
        data["dt"] = this.dt;
        data["sys"] = this.sys ? this.sys.toJSON() : <any>undefined;
        data["timeZone"] = this.timeZone;
        data["id"] = this.id;
        data["name"] = this.name;
        data["cod"] = this.cod;
        return data; 
    }
}

export interface IOpenWeatherCurrent {
    cordinates?: Coordinates | undefined;
    weather?: Weather[] | undefined;
    base?: string | undefined;
    main?: Main | undefined;
    visibility?: string | undefined;
    wind?: Wind | undefined;
    clouds?: Clouds | undefined;
    dt?: number;
    sys?: SysDto | undefined;
    timeZone?: number;
    id?: number;
    name?: string | undefined;
    cod?: number;
}

export class Coordinates implements ICoordinates {
    longitude?: number;
    latitude?: number;

    constructor(data?: ICoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): Coordinates {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data; 
    }
}

export interface ICoordinates {
    longitude?: number;
    latitude?: number;
}

export class Weather implements IWeather {
    id?: number;
    main?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;

    constructor(data?: IWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.main = _data["main"];
            this.description = _data["description"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): Weather {
        data = typeof data === 'object' ? data : {};
        let result = new Weather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["main"] = this.main;
        data["description"] = this.description;
        data["icon"] = this.icon;
        return data; 
    }
}

export interface IWeather {
    id?: number;
    main?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
}

export class Main implements IMain {
    temperature?: number;
    feelsLike?: number;
    minimumTemperature?: number;
    maximumTemperature?: number;
    pressure?: number;
    humidity?: number;

    constructor(data?: IMain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.temperature = _data["temperature"];
            this.feelsLike = _data["feelsLike"];
            this.minimumTemperature = _data["minimumTemperature"];
            this.maximumTemperature = _data["maximumTemperature"];
            this.pressure = _data["pressure"];
            this.humidity = _data["humidity"];
        }
    }

    static fromJS(data: any): Main {
        data = typeof data === 'object' ? data : {};
        let result = new Main();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["temperature"] = this.temperature;
        data["feelsLike"] = this.feelsLike;
        data["minimumTemperature"] = this.minimumTemperature;
        data["maximumTemperature"] = this.maximumTemperature;
        data["pressure"] = this.pressure;
        data["humidity"] = this.humidity;
        return data; 
    }
}

export interface IMain {
    temperature?: number;
    feelsLike?: number;
    minimumTemperature?: number;
    maximumTemperature?: number;
    pressure?: number;
    humidity?: number;
}

export class Wind implements IWind {
    speed?: number;
    degrees?: number;

    constructor(data?: IWind) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.speed = _data["speed"];
            this.degrees = _data["degrees"];
        }
    }

    static fromJS(data: any): Wind {
        data = typeof data === 'object' ? data : {};
        let result = new Wind();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["speed"] = this.speed;
        data["degrees"] = this.degrees;
        return data; 
    }
}

export interface IWind {
    speed?: number;
    degrees?: number;
}

export class Clouds implements IClouds {
    all?: number;

    constructor(data?: IClouds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.all = _data["all"];
        }
    }

    static fromJS(data: any): Clouds {
        data = typeof data === 'object' ? data : {};
        let result = new Clouds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["all"] = this.all;
        return data; 
    }
}

export interface IClouds {
    all?: number;
}

export class SysDto implements ISysDto {
    type?: number;
    id?: number;
    country?: string | undefined;
    sunrise?: number;
    sunset?: number;

    constructor(data?: ISysDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.id = _data["id"];
            this.country = _data["country"];
            this.sunrise = _data["sunrise"];
            this.sunset = _data["sunset"];
        }
    }

    static fromJS(data: any): SysDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["id"] = this.id;
        data["country"] = this.country;
        data["sunrise"] = this.sunrise;
        data["sunset"] = this.sunset;
        return data; 
    }
}

export interface ISysDto {
    type?: number;
    id?: number;
    country?: string | undefined;
    sunrise?: number;
    sunset?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}